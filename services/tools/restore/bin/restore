#!/usr/bin/env ruby
# -*- mode: ruby -*-
# Copyright (c) 2009-2011 VMware, Inc.

ENV["BUNDLE_GEMFILE"] ||= File.expand_path("../../Gemfile", __FILE__)

require "rubygems"
require "bundler/setup"
require "nats/client"
require "yajl"
require "logger"
require "optparse"
require 'eventmachine'
require 'em-http-request'
require 'json'
require 'uri'
require 'yaml'

config_file = nil
config = {}

def usage
  puts "If no option, use the default configuration file '../config/restore.yml'"
  puts "Use -c to load configuration in specified file"
  puts "Use other options to load configuration in command line"
  puts "Use -h to get more options details"
end

def invalid_options
  puts "Invalid options!"
  puts
  usage
  exit
end

OptionParser.new do |opts|
  opts.banner = "Usage: restore [options]"
  opts.on("-u", "--gateway_uri URI", "Service gateway REST API URI, such as 10.135.81.72:59477") {|uri| config["gateway_uri"] = uri}
  opts.on("-b", "--backup_path PATH", "Instance backup data directory") {|path| config["backup_path"] = path}
  opts.on("-i", "--instance_id [ID]", "Service instance id") {|id| config["instance_id"] = id}
  opts.on("-k", "--token [TOKEN]", "Gateway API access token") {|token| config["token"] = token}
  opts.on("-m", "--mode [MODE]", "Restore mode, it should be restore or recover") {|mode| config["mode"] = mode}
  opts.on("-t", "--timeout [TIMEOUT]", Integer, "Gateway API response timeout") {|timeout| config["timeout"] = timeout}
  opts.on("-c", "--config CONFIG", "Configuration File") {|opt| config_file = opt}
  opts.on("-h", "--help", "Help") do
    puts opts
    puts
    usage
    exit
  end
end.parse!

# "gateway_uri" option is mandatory for command line options,
# so just check it to see whether using command line parameters or configuration file.
if config["gateway_uri"] == nil
  # If "gateway_uri" is not set, but other command line options are set,
  # it is invalid.
  if config["instance_id"] || config["backup_path"] || config["token"] || config["mode"] || config["timeout"]
    invalid_options
  end
  # If no configuration file specified, use the default one.
  if config_file == nil
    config_file = File.expand_path("../../config/restore.yml", __FILE__)
  end
  # Load the restore configuration from file.
  begin
    config = YAML.load(File.open(config_file))
  rescue => e
    puts "Could not read configuration file: #{e}"
    exit
  end
else
  # If another mandatory option "backup_path" is not set,
  # or specified configuration file is set,
  # it is invalid.
  if config["backup_path"] == nil || config_file != nil
    invalid_options
  else
    # Set default value for optional options
    config["instance_id"] = config["backup_path"].split(/\//)[-2] if config["instance_id"] == nil
    config["token"] = 0xdeadbeef if config["token"] == nil
    config["mode"] = "restore" if config["mode"] == nil
    config["timeout"] = 10 if config["timeout"] == nil
    config["content_type"] = "application/json"
  end
end

@is_successful = false
def send_request(config)
  req = {
    # Should set timeout explicitly since the default value is 10s.
    :timeout => config["timeout"].to_i,
    :head => {
      "Content-Type" => config["content_type"],
      "X-VCAP-Service-Token" => config["token"],
    },
    :body => {
      :instance_id => config["instance_id"],
      :backup_path => config["backup_path"]
    }.to_json
  }
  http = EM::HttpRequest.new("#{http_uri(config["gateway_uri"])}/service/internal/v1/#{config["mode"]}").post(req)

  http.callback do
    if http.response_header.status == 200
      puts "Restore successfully"
      @is_successful = true
    else
      puts "Failed to restore, status = #{http.response_header.status}"
    end
  end

  http.errback do
    puts "Failed to restore: #{http.error}"
  end
end

def http_uri(uri)
  uri = "http://#{uri}" if (uri.index('http://') != 0)
  uri
end

EM.run do
  trap('TERM') {puts "\nInterupted"; exit(1)}
  trap('INT') {puts "\nInterupted"; exit(1)}
  send_request(config)
  EM.add_periodic_timer(1) do
    if @is_successful
      EM.stop
    end
  end
  EM.add_timer(config["timeout"].to_i) do
    puts "Failed to restore: timeout when waiting for gateway response"
    EM.stop
  end
end
